{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Academic Notes!","text":"<p>Here you will find the daily notes that document my study journey for:</p> <ul> <li>Molecular Biology</li> <li>Plant Physiology</li> <li>Laboratory of Biomolecular Methods</li> </ul>"},{"location":"#website-structure","title":"Website Structure","text":"<ul> <li>\ud83e\uddec Molecular Biology Notes: daily notes taken based on the material from the Molecular Biology course</li> <li>\ud83c\udf31 Plant Physiology Notes: daily notes taken based on the material from the Plant Physiology course </li> <li>\ud83d\udd2c Laboratory of Biomolecular Methods: coming soon (march/april 2025)!</li> </ul> <p>This website is powered by Obsidian.md notes and Mkdocs</p>"},{"location":"about/","title":"About <code>academic-notes</code>","text":"<p><code>academic-notes</code> is about sharing knowledge in an open and transparent learning journey. </p> <p>The core values are freedom, open-mindedness and community-driven self-correction.</p> <p>Everyone can contribute to <code>academic-notes</code> following the contributions guidelines.</p> <p><code>academic-notes</code> relies on content that is free to share and to use, does not make any commercialization of its products and does not monetize its contents. It is distributed under a MIT License.</p> <p>There is no claim that the content hereby provided is always 100% correct: if you find mistakes, correct them and contribute to this learning journey!</p> <p>This website is powered by Obsidian.md notes and Mkdocs</p>"},{"location":"contributing/","title":"Contributing to <code>academic-notes</code>","text":"<p>Do you want to contribute to this project? Make sure to read this guidelines first :)</p>"},{"location":"contributing/#issue","title":"Issue","text":"<p>When to do it:</p> <ul> <li>You found bugs but you don't know how to solve them or don't have time/will to do the solve</li> <li>You want new features but you don't know how to implement them or don't have time/will to do the implementation</li> </ul> <p>\u26a0\ufe0f Always check open and closed issues before you submit yours to avoid duplicates</p> <p>How to do it:</p> <ul> <li>Open an issue</li> <li>Give the issue a meaningful title (short but effective problem description)</li> <li>Describe the problem following the issue template</li> </ul>"},{"location":"contributing/#traditional-contribution","title":"Traditional contribution","text":"<p>When to do it:</p> <ul> <li>You found bugs and corrected them</li> <li>You optimized/improved the code</li> <li>You added new features that you think could be useful to others</li> </ul> <p>How to do it:</p> <ol> <li>Fork this repository</li> <li>Commit your changes</li> <li>Submit pull request (make sure to provide a thorough description of the changes)</li> </ol>"},{"location":"contributing/#thanks-for-contributing","title":"Thanks for contributing!","text":""},{"location":"Molecular_Biology/Day_1/","title":"Day 1","text":""},{"location":"Molecular_Biology/Day_1/#1-introduction-to-molecular-biology","title":"1. Introduction to molecular biology","text":"<p>Molecular biology is a discipline at the intersection between biochemistry and cellular biology:</p> <ul> <li>Molecular biology, per formal definition, studies nucleic acids but in general deals with the interactions among bio-macromolecules</li> <li>Biochemistry, per definition, studies proteins, but in general deals with the metabolic interactions in a cell, often involving macro and micro-molecules</li> <li>Cellular biology studies the organization and macro-processes that occur within a cell</li> </ul> <p>Molecular biology was founded with the discovery of the DNA double helix structure (1953, Watson and Crick), and escalated quickly with several techniques introduced during the 70s, the 80s and the 90s, such as recombinant DNA, genetic engineering and all the procedures that allow to isolate and manipulate the genetic material. </p> <p>Several disciplines, like bioinformatics, structural biology, molecular genetics, molecular evolution, transcriptomics and proteomics are theoretically and practically supported by molecular biology. </p>"},{"location":"Molecular_Biology/Day_1/#2-nucleobases-nucleosides-and-nucleotides","title":"2. Nucleobases, nucleosides and nucleotides","text":""},{"location":"Molecular_Biology/Day_1/#2a-nucleobases","title":"2a. Nucleobases","text":"<p><code>Nucleobases</code> are organic molecules based on heterocyclic structures, meaning that they have a close structure in which are included also heteroatoms, such as oxygen (O), nitrogen (N) or sulfur (S). In the case of nucleobases, we have N as heteroatom:</p> <p></p> <p>As you can see from the image, we have 5 \"traditional\" nucleobases, divided in two classes:</p> <ul> <li>Pyrimidines: one hexagonal rings, with two Ns, in position 1 and 3. Belonging to this class we have uracil, thymine and cytosine</li> <li>Purines: one hexagonal ring concatenated to a pentagonal one, with 4 Ns (1,3,7,9). Belonging to this class we have adenine and guanine As you can see, there is an interesting feature in the N-1 and N-9 of purines and pyrimidines: they are bound to a H. Let's keep an eye on this!</li> </ul>"},{"location":"Molecular_Biology/Day_1/#2b-nucleosides","title":"2b. Nucleosides","text":"<p><code>Nucleosides</code> are nucleobases linked to a pentose sugar. The pentose sugar can be:</p> <p></p> <p>We notice two things from this image:</p> <ul> <li>Ribose has a hydroxyl group in position 2', whereas deoxyribose does not (hence the deoxy-)</li> <li>The numbering of the carbons has a <code>'</code> (prime): this is due to the fact that these carbons are also linked to another carbon-based molecule (a nucleobase), and we need to differentiate them</li> </ul> <p>Ribose is the pentose employed for RNA synthesis, while deoxyribose for DNA: the huge difference in the stability of the two molecules (DNA hyper-stable, RNA easily degraded) boils down essentially to the greater stability of the pentose without a hydroxyl in 2'.</p> <p>Nucleosides link a nucleobase to a pentose via N-glycosdic bond, which occurs between the 2' carbon of the pentose and the N-1 (pyrimidine) or N-9 (purine) of the nucleobase. Bonding happens through a condensation reaction</p>"},{"location":"Molecular_Biology/Day_1/#2c-nucleotides","title":"2c. Nucleotides","text":"<p>Nucleotides are, formally, n-phospho-nucleosides, meaning that they \"only\" add (max. 3) phosphate groups to the 5' end of the nucleoside. The 5' end indeed is easily subject to a condensation reaction involving its hydroxyl group and the same group in HPO4- ion.</p> <p>This reaction generates a mono-phospho-nucleoside, that can be further condensed into a di-phosoho-nucleoside and a tri-phospho-nucleoside, which are progressively more subject to repulsion forces among negative charges in the phosphate groups and thus more unstable (hence more energy dense, that's why ATP is an energy-related molecule).</p> <p>Nucleotides in the nucleic acids are mono-phospho-nucleotides, but they themselves come from tri-phospho-nucleotides synthetized by the metabolic pathway of nucleotide biosynthesis. In order to form RNA, we need a tri-phospho-nucleoside (NTP), while for DNA we need a tri-phosphate-deoxynucleoside (dNTP). </p>"},{"location":"Molecular_Biology/Day_1/#3-nomenclature","title":"3. Nomenclature","text":"Nucleobase Nucleoside Nucleotide RNA DNA Adenine (A) (deoxy-)Adenosine (5'-deoxy-)Adenosine-n-phosphate (AMP/ADP/ATP) or Adenylic acid \u2705 \u2705 Guanine (G) (deoxy-)Guanosine (5'-deoxy-)Guanosine-n-phosphate (GMP/GDP/GTP) or Guanylic acid \u2705 \u2705 Thymine (T) (deoxy-)Thymidin (5'-deoxy-)Thymidin-n-phosphate (TMP/TDP/TTP) or Thymidylic acid \u274c \u2705 Cytosine (C) (deoxy-)Cytidin (5'-deoxy-)Cytidin-n-phosphate (CMP/CDP/CTP) or Cytidylic acid \u2705 \u2705 Uracil (U) (deoxy-)Uridin (5'-deoxy-)Uridin-n-phosphate (AMP/ADP/ATP) or Uraciyic acid \u2705 \u274c"},{"location":"Molecular_Biology/Day_2/","title":"Day 2","text":""},{"location":"Molecular_Biology/Day_2/#1-from-nucleotides-to-dna","title":"1. From nucleotides to DNA","text":"<p>In the last post we saw that nucleotides are the building blocks of DNA and RNA, and are constituted by:</p> <ul> <li>A pentose sugar (ribose or deoxyribose)</li> <li>A nucleobase (purine - A and G - or pyrimidine - C, T and U)</li> <li>One or more phosphate groups</li> </ul> <p>Nucleotides can generate new structures by bonding (1) \"vertically\" or (2) \"horizontally\":</p> <ol> <li>Two nucleotides form a dinucleotide through a phosphodiester bond, which comes from a highly hexoergonic condensation reaction between a nucleoside-tri-phosphate (NTP or dNTP) and the 3' hydroxil of the pentose sugar of a nucleoside-mono-phosphate. The (d)NTP frees two of its three phosphate groups (and the related energy) to form a highly stable covalent bond with the 3' carbon.</li> <li>Two nucleotides form a base pair (bp) by cnnecting their nucleobases via H-bonds. H bonds are not as strong as covalent bonds, but their are the strongest among the weak bonds: they occur between a highly electronegative atom (O, N, S) and a hydrogen atom, and the strength of hydrogen bonds relies in their quantity. A single molecule of human DNA contains billions of hydrogen bonds, hence its great stability.</li> </ol> <p></p> <p></p> <p>Regarding point 2, we have to add two important details:</p> <ul> <li>Nucleobases do not associate freely, they follow a precise rule, known as complementarity: A only associates with T (or with U), and C only bonds with G.  The first to observe complementarity was the American biochemist Erwin Chargaff, who formulated the two Chargaff's rules</li> <li>In light of what mentioned in the previous point, we observe a difference in how many H-bonds are formed: C-G pairs form 3 H-bonds, A-T pairs only two. This difference is key in determining the stability of a DNA sequence, as AT-rich DNA regions are more unstable than GC-rich ones. This also hints at the function of the regions: given the difference in stability, more stable (GC-rich) regions are mostly gene-coding, whereas AT-rich regions are generally repeated/spacer/anchoring/promoter/enhancer... sequences</li> </ul> <p>So, if we stick more than two nucleotides together vertically, and we pair them with a complementary strand horizontally, we have completed our first nucleic acid molecule!</p> <p>We can notice two very important things here:</p> <ul> <li>There are always a 5' carbon with a free phosphate group and a 3' carbon with a free hydroxil group (they are known as the 5' and 3' end)</li> <li>There are two clear portions of the nucleic acid structure: a sugar-phosphate backbone, which is highly polar and thus hydrophilic (that's why it is exposed to the outside, as the cell environment is water-based), while the base pairs are non-polar (thanks to the H-bond stabilization), thus hydrophobic (and that's why they are on the inside).  But things are not as simple as they seem: there are, indeed, more rules to \"make\" a DNA molecule :)</li> </ul> <p></p>"},{"location":"Molecular_Biology/Day_2/#2-the-dna-structure","title":"2. The DNA structure","text":"<p>As we know, DNA is a double helix. This means that:</p> <ul> <li>There are two strands in the helix. These strands are anti-parallel, which means that they are parallel to each other but oriented in a different way: there's a 5'-3' strand and a 3'-5' strand</li> <li>The two strands spiral following two grooves of unequal dimension: the major and the minor groove. The spiraling is generally dextrorotatory. </li> <li>DNA strands has to balance the repulsive forces among negative charges along the sugar-phosphate backbone with several adjustments, as the internal H-bonds are not really sufficint in most of the cases. The bases are then stacked not in a perfectly parallel fashion, but they can rotate along the helix axis (twist, or repulsion among two base pairs), along the pairing axis (tilt, rotation in the positioning of two nucleotides within a base pair) and along the sugar-phosphate backbone (roll, or repulsion between two nucleotides within a dinucleotide)</li> </ul> <p>The key take-home message here is that DNA strands are never perfectly aligned and parallel, but there are always twists, tilts and rolls to adjust the DNA structure in order to minimize instability.</p> <p></p> <p>We recognize three primary DNA structures:</p> <ul> <li>B, the most widespread, is considered the \"normal\" structure that DNA takes on when it is exposed to normal conditions. The diameter of the helix is 10 A, and each step (360\u00b0 rotation of the helix) takes 34 A of vertical distance, with 11 bp stacked in there. </li> <li>A, this structure is \"short and thick\", often associated with extreme conditions such as dehydration and cold. It is also frequent in double stranded RNAs and in DNA-RNA hybrids</li> <li>Z, this structure is \"long and slim\",, and there is scarce insight on its function, even if it might be connected with some cancerous processes. </li> </ul> <p></p> <p>Beyond the primary structures, DNA can also associate in secondary structure due to intra-strand bonds: for example, G-quadruplexes form when 4 complanar Gs bind each other through non-canonical H-bridges, or in C-rich motifs we can have non-canonical bonds among Cs. Non-canonical bonds often determine the so-called \"triple helix\" motif. </p> <p></p> <p>There are also other structures in which DNA strands can associate when there is complementarity within the same strand (often in highly repetitive regions). You can then have a cruciform DNA, where short sequences pair with each other deviating the course of the molecule and constituting a cross-like structure, and a slipped DNA, where larger chunks of the strand are left single-stranded because they are able to pair with themselves.</p> <p></p>"},{"location":"Plant_Physiology/Day_1/","title":"Day 1","text":""},{"location":"Plant_Physiology/Day_1/#1-introduction-to-plant-physiology","title":"1. Introduction to Plant Physiology","text":"<p>Plant physiology specifically targets:</p> <ul> <li>Molecular and cellular processes (metabolism)</li> <li>Growth</li> <li>Reproduction</li> <li>Interactions with the surrounding environment</li> </ul> <p>The study of plants in general has broad applicability and can help us solve big and small everyday problems:</p> <ul> <li>Starting from the fact that plants are at the base of the food chain (producing ATP and reducing power with photosynthesis and glucose and other macromolecules with their anabolic pathways), we use them for our agriculture. Understanding how to improve plant resistance to pathogens, their nutrient qualities and their resistance to extreme climatic conditions is key in adapting to climate change and keeping feeding the Planet</li> <li>Plants can be used also for pharmaceutical purposes, from crafting green vaccines to producing cost-effective and scalable drugs such as anti-tumorals. </li> <li>Single-species cultures, fertilizers, pesticides and crop-based emissions are a leading cause of habitat loss, environmental changes and global warming. Plant sciences are intended to optimize workflows and pathways to help reconstructing biodiversity, reducing the environmental impact of agriculture and slow down emissions. </li> </ul>"},{"location":"Plant_Physiology/Day_1/#2-the-plant-cell","title":"2. The Plant Cell","text":""},{"location":"Plant_Physiology/Day_1/#2a-external-structures","title":"2a. External structures","text":"<p>There is a core difference between animal and plants cells: the latter ones have a \"rigid\", well-defined geometric form, determined by the presence of a cell wall.</p> <p>The cell wall is mainly constituted by polysaccharides, like cellulose, pectin, lignin, hemicellulose... But also by soluble proteins</p> <p>It is made up by three layers: -  The lamella mediana: the first that get deposited, is placed between two plant cells - The primary wall (thin) - The secondary wall (thick and resistant, but not always deposited: it can be made up by very complex molecules like lignin and cork)</p> <p></p> <p>The cell wall is often crossed by small tubular structures known as plasmodesmata (sing: plasmodesma):</p> <ul> <li>They are made up by a central structure of 40-50 nm of diameter, the desmotubule, which is constituted by globular proteins. The desmotubule is in continuity with the endoplasmic reticulum (ER) and connects the cytoplasms of two adjacent cells. </li> <li>The desmotubule is linked to the cell wall with anchoring proteins, and is surrounded by a cytosolic sleeve, organised by globular proteins in helicoidal patterns, that contribute to constituting the 8-10 spiraling channels in which the sleeve is divided. </li> </ul> <p>The desmotubule contributes to the symplastic transportation, which connects most of the cells in the leaf mesophyllum. There is also another kind of transportation, which is the apoplastic one, which connects cells via the apoplast, a intermediate space between the plasmatic membrane and the cell wall. </p> <p>Symplastic transport is key for the communication and the growth of the plant systems, but it comes with a limitations: only molecules under the Size Exclusion Limit (SEL), a dimensional and weight filter that keeps harmful molecules or pathogens from sliding from cell to cell. SEL was studied by using color tracers with different dimensions. </p> <p>Some pathogens have adapted their systems to bio-hack the symplastic transport by modifying the SEL, using movements proteins that are able to enlarge the plasmodesmata and let the nuclear material from the pathogens pass (they generally are viruses, such as the Tobacco Mosaic Virus). </p> <p>Plants generally use callose (a poly-saccharide similar to cellulose) to close the enlarged plasmodesmata when they sense a pathogenic invasion: callose synthase is the enzyme that takes care of producing the saccharide, while $\\beta$ -1,3-glucanase is the enzyme that degrades it. </p>"},{"location":"Plant_Physiology/Day_1/#2b-cytoskeleton","title":"2b. Cytoskeleton","text":"<p>Cytoskeleton is a key component to ensure a dynamic rigidity in the cell, it is made up by:</p> <ul> <li>Microtubules: constituted by 13 hetero-dimeric chains of $\\alpha$ and $\\beta$ tubuline</li> <li>Intermediate filaments: helicoidal filaments constituted by various proteins </li> <li>Nanotubules: smaller filaments constituted by actin, revolving in an helicoidal fashion (a pseudo-double helix, or coiled-coil) </li> </ul> <p>Filaments are polymerized following this workflow:</p> <ul> <li>Nucleation/organizing centers (for tubuline are generally $\\gamma$-tubuline) around which the first pieces of the filaments are assembled</li> <li>With a positive feedback-like chain of reactions, the polymerization phase takes place and shapes up the tubule</li> <li>The tubule reaches a dynamic equilibrium status (stationary phase) where the velocity of the depolymerization is the same of the one of polymerization.</li> </ul> <p>Microtubules and nanotubules are assembled in a dynamic equilibrium setting where monomers are added to one end of the filament (polymerization end) and they are subtracted at the other end (depolymerization end). When the velocity of polymerization is higher than that of depolymerization, the concentration of monomers (tubuline, actin...) decreases and the filaments get enlongated, while when depolymerization dominates the concentration of monomers increases. This delicate equilibrium is crucial in numerous processes, from movement to shaping the cell. </p>"},{"location":"Plant_Physiology/Day_2/","title":"Day 2","text":""},{"location":"Plant_Physiology/Day_2/#1-cytoskeleton-and-cell-growth","title":"1. Cytoskeleton and Cell Growth","text":"<p>The cytoskeleton plays a crucial role in the plant growth, as it is highly involved in the cell elongation process:</p> <ul> <li>During the quiescent phase, the cytoskeleton is mainly made up by microtubules casually distributed in the cytosol</li> <li>During the active elongation we have a structured, high-level cytoskeleton in which the microtubules are organized in a polarized way way, perpendicular to the direction of growth.  </li> </ul> <p>In the interphase, the actin filaments are also laid in a casual way, but they wrap the nucleus and branch out from there to reach other organelles and keep them in place. </p> <p>Actin filaments also help move things around the cell, like particles and organelles. They are responsible for the so called \"cytosolic currents\", where they associates with motor proteins like myosin. Myosin is an omodimer, made up by 2 globular heads and 2 coiled-coils tails. The two heads can hydrolize ATP, in a cycle that gives myosin heads motor properties. Myosin interacts with actin filaments, making them slide while the heads reach the \"power stroke\" phase (see the myosin cross-bridge cycle). This is the way in which things are moved around the plant cell!</p> <p>Several studies leveraged transgenic lineages of Arabidopsus thaliana, a model organism for plants, mixing the plant myosin with an algal fast-paced myosin or the human slow myosin. The results were not far from expectations:</p> <ul> <li>The wild-type plants grew normally</li> <li>The fast-paced myosin lead to an enhanced and faster growth, with bigger cells on average</li> <li>The slow myosin caused a slowing in the growth and smaller cells</li> </ul>"},{"location":"Plant_Physiology/Day_2/#2-plastids","title":"2. Plastids","text":"<p>Plastids are key components in the plant cell: they are indeed its metabolic powerhouse, where several functions are carried out (depending on the type of plastid):</p> <ul> <li>Photosynthesis and photo-biological functions</li> <li>Secondary metabolism </li> <li>Nutrient or pigments stock</li> </ul> <p></p>"},{"location":"Plant_Physiology/Day_2/#2a-proplastids","title":"2a. Proplastids","text":"<p>As the name and the TEM images suggest, proplastids are immature precursors of other plastidial organelles, and they generally evolve in a tissue-specific way. Proiplastids are generally small, with only a neonatal version of the structures they will acquire with maturation (e.g. unorganized chlorophyll crystals). Proplastids are typically of quickly-reproducing meristematic cells (the equivalent of animal stem cells): these cells are generally not specialized and, needing to reproduce quickly, they cannot spend to much energy in the formation of mature plastidial structures. By the time meristematic cells reach a full differentiation stage, also the proplastid have matured in specialized plastidial organelles.</p>"},{"location":"Plant_Physiology/Day_2/#2b-etioplasts","title":"2b. Etioplasts","text":"<p>Etioplasts are a semi-mature form of plastids: they develop with the absence of light, and they represent a very good example of energy optimization by the plant cells. Since converting proplastids to chloroplasts requires lots of energy, it is only convenient when there is light and the energy balance can be eventually positive for the plant: if the plant is in the dark, it converts proplastids in production-ready structures, that still are nit deployed. The chlorophyll starts gathering in chrystal-like structures known as lamellar body (center of image A). As soon as light kicks in, the etioplasts are turned into chloroplasts.</p>"},{"location":"Plant_Physiology/Day_2/#2c-chloroplasts","title":"2c. Chloroplasts","text":"<p>Chloroplasts are the photosynthetic center of the cell: they have internal membranes arranged in a bag-like shape, known as tilacoids, where reaction centers are exposed to light. This bag-like membranes are stacked in piles known as grana. This organelles are highly efficient and specialized, and contain several pigments like chlorophyll, anthocyanins and carotenoids. When the chloroplast \"gets old\" (senescence process), its internal organization start to degrade, and the chlorophyll is destructured and recycled: this process leaves space for the anthocyanins and the carotenoids (orange-red colors), which explains why leaves turn red/orange/yellow/brown during fall.</p>"},{"location":"Plant_Physiology/Day_2/#2d-chromoplasts","title":"2d. Chromoplasts","text":"<p>Chromoplasts contain pigments such as anthocyanins (pink-red), carotenoids (oranfe-yellow-red) and flavonoids (ultraviolet colors): they do not contribute to photosynthesis, but where evolved for different tasks. Colors are indeed crucial in attracting pollinators or refraining predators from eating the plant: plants that where able to exploit colored flowers or fruits had more success throughout the history of life, and that got them selected and produced the wonderful variability of colors in nature. This is part of plant-pollinators co-evolution. </p>"},{"location":"Plant_Physiology/Day_2/#2e-leukoplasts","title":"2e. Leukoplasts","text":"<p>Leukoplasts are centers for processing secondary metabolites: they often produce useful molecules in plant-based pharmacology or for actual drugs prepration. Leukoplasts, as the name suggest, lack pigments, keeping a translucid appearence under the microscope. Leukoplast can mature in different nutrient-stocking structures, such as amyloplasts (polysaccharides), elaioplasts (lipids) and proteinoplasts (proteins). Root vegetables, such as tubers, are rich in nutrients-filled plastids.</p>"},{"location":"Plant_Physiology/Day_2/#3-plastids-reproduction","title":"3. Plastids reproduction","text":"<p>As mithocondria in animal cells, plastids can divide indepemdently from the cellular systems abnd are inherited separately from the other organelles. Their division appears to be dependent on the FtsZ protein, responsible for cellular division in bacteria, which hints at the endosymbiotic theory. Their division is also dependent on Plastid Division proteins (PDV): when PDVs are overexpressed, they speed up plastid division and lead to an increase in the number and decrease in the size of chloroplasts: this is achieved by expressing a strong constitutive (always active) promotor for the operons codifying for PDVs. If, on the other hand, we insert a antisense sequence inside the codifying portion of the operon, we get out the traditional RNA + the antisense sequence, which is its complementary. The RNA and the abti-RNA stick to each other and the complex is rapidly degraded by nucleases: in the so called antisense lineages, we can keep the growth of the plant under control, and we have the production of less but bigger chloroplasts. </p> <p>Plastid reproduction is influenced by phyto-hormones and cytokines (cellular messengers), highlighting how the process is deeply connected with cellular and plant growth.</p> <p>When plastids start reproducing, they implement the FtsZ protein, which is an homolog of  tubulin in bacteria. When FtsZ is activated, a cascade of signal transduction is initiated: the FtsZ protein activates a protein named ARC6. This protein, in turn, recruits the plastidial division proteins PDV1 and PDV2: these two are key in attracting the final actor in plastidial division, the GTPase DRP5B, similar to dynamin in human neurons. </p> <p>Plastids are semi-autonomous organelles, meaning that they reproduce and are passed on independently from the main reproductive cycle of the cell. This was firstly noticed when it was discovered  that the inheritance of various charachters was non-Mendelian (these charachters were linked to plastids). Plastids have their own genome, the plastome, which is actually circular double-stranded DNA: it's smaller than a normal bacterial genome and contains only 150-200 genes. This is explained by the endosymbiotic theory: the plastid is thought to have been a bacterial alga before being phagocyted (approx. 1.2 billion years ago) by the precursor of the actual plant cell. This has led to a coexistence of the two cells, one within the other, and, in millions of years of evolution, the chloroplast slowly lost all the unnecessary functions (nutritive and defensive mainly), because  the plant cell took them on: this lead to a gene loss, and also to a gene transfer from the plastome to the nuclear genome. The plastidial genomes are mainly related to photosynthesis and to transcription/translation of proteins.</p>"},{"location":"Plant_Physiology/Day_3/","title":"Day 3","text":""},{"location":"Plant_Physiology/Day_3/#1-plant-mitochondria","title":"1. Plant Mitochondria","text":"<p>Mitochondria in plants are younger than chloroplasts (in evolutionary terms), and they have similar functions to animal mitochondria. They are the powerhouse of the cell, the cellular respiration takes place here and they are also semi-autonomous organelles (they have a 200k bp DNA, significantly more than the animal mitochondria). There are more mitochondrial genome copies in the meristematic cells than in the differentiated cells, as the mitochondria continue to replicate and to be passed on, without actually duplicating the DNA.</p>"},{"location":"Plant_Physiology/Day_3/#2-peroxysomes","title":"2. Peroxysomes","text":"<p>Peroxysomes, as glyoxysomes, are known as microbodies. They are responsible in fighting oxidative stress, as they carry on an oxidation reaction:</p> <p>$RH_{2} + O_{2}  \\rightarrow H_{2}O_{2} + R$</p> <p>R is the organic substrate.</p> <p>Hydrogen peroxide is then easy to eliminate inside the peroxysome itself, as it contains a wide crystal of catalase, an enzyme that produces water and oxygen:</p> <p>$H_{2}O_{2}  \\rightarrow H_{2}O + \\frac{1}{2}O_{2}$</p> <p>As you can see, we reduced the number of oxygen molecules by half.</p> <p>Against oxidative stress we have also other non-enzymatic weapons, such as vitamins, ascorbic acid and polyphenols, as well as other enzymatic ones: catalase, peroxidase, superoxide reductase and superoxide dismutase. </p>"},{"location":"Plant_Physiology/Day_3/#3-glyossysomes","title":"3. Glyossysomes","text":"<p>Glyossysomes are more common in seeds were big oily reservoirs are stored: they are responsible for the glyossylic acid cycle, which turns lipids into carbohydrates, which are more directly employable by the embryo in its growth. These organelles were probably fully responsible for the respiratory metabolism of the plant cells before mitochondria entered the scene.</p>"},{"location":"Plant_Physiology/Day_3/#4-oleosomes","title":"4. Oleosomes","text":"<p>Oleasomes are microbodies that contain lipids reservoirs (generally an oily drop). They are sorrounded by a single layer of phospholipids (if they had the double layer like a normal membrane, the oil would pass through it), and they are stabilized by fork-like proteins known as oleosins. Oleosins stabilize the single layer avoiding ruptures, but they are also responsible for preventing fusion of adjacent oleosomes. </p>"},{"location":"Plant_Physiology/Day_3/#5-vacuoles","title":"5. Vacuoles","text":"<p>Vacuoles are the biggest organelles in the plant cell: at maturity, they can take up to 80-90% of the cell volume. Most of them are filled with a water-y matrix, and surrounded by a double-layered membrane known as tonoplast. Vacuoles are responsible for maintaining the internal pressure inside the plant cell: the so-called turgor pressure of the cell. If the cell loses water, the vacuole collapses and the cell withers. </p> <p>There are two types of specialized vacuoles:</p> <ul> <li>Protein bodies, that contain proteins and are generally found in seeds, where the proteins are demolished during growth</li> <li>Lytic vacuoles, which contain hydrolytic enzymes: they are released during senescense, programmed cellular death (aka apoptosis), or in response to damage. They cause a controlled demolition in space and time of portions of the plant cell. The acid pH inside lytic vacuoles is maintained thanks to the vacuolar ATPase, that moves protons from the cytosol to the vacuole.</li> </ul> <p>Vacuoles can be used also as a stocking for primary and secondary metabolites, and they also contain substances for protection and detoxification. This detoxification potential can be also useful in the bioremediation of polluted soils. </p>"},{"location":"Plant_Physiology/Day_4/","title":"Day 4","text":""},{"location":"Plant_Physiology/Day_4/#1-plant-life-cycle","title":"1. Plant Life Cycle","text":"<p>Plants have two types of growth:</p> <ul> <li>Determined growth, which usually involves organs that have a final stage of differentiation with a well defined size, such as flowers, fruits or leaves. The number of cells reaches a certain threshold and remains stable from there, while cells can still elongate (elongation growth).</li> <li>Non-determined growth, that involves the trunk and the and the roots of the plant. They both have the so-called apical meristem, which promotes their growth indefinitely. The apical meristem of the trunk descends to form the leaves primordia, which help the formation of leaves along with the leaves meristem. On the other hand, in the roots, meristem cells go up to form roots organs such as root hairs.</li> </ul> <p>Meristems can be primary or secondary (although secondary growth is not common to all the plants): the first ones are the apical meristems (Shoot Apical Meristem - or SAM, and Root Apical Meristem - or RAM[^1]), the other ones are known as lateral meristems and promote the volumetric growth of the trunk (only in species belonging to the Gymnospermata taxon).</p> <p>Primary growth then corresponds to an elongation growth (for the entire organism, not to be mistaken with the cellular elongation growth), whereas the secondary growth is linked to an increase in the diameter of the plant, both in the roots and in the wooden portion of the trunk.</p> <p></p> <p>As you can see, there are several regions related to the meristem (here we have the root meristem). There is an organization center, which is layered to set the cells growth in the correct patterns, and the quiescent center, that controls cellular proliferation to avoid cancerous growth.</p> <p>[^1]: Please note that the term RAM is generally not used to indicate the Root Apical Meristem, but rather Random Access Memory: so no, computers do not have root apical meristems. </p>"},{"location":"Ruby/Day_1/","title":"Day 1","text":"<p>This page is based on the official Ruby quickstart</p>"},{"location":"Ruby/Day_1/#1-introduction-to-ruby","title":"1. Introduction to Ruby","text":"<p>Install Ruby for Ubuntu with:</p> <pre><code>sudo apt-get install ruby-full\n</code></pre> <p>And check the version with:</p> <pre><code>ruby -v\n</code></pre> <p>You can start an interactive shell:</p> <pre><code>irb #interactive ruby\n</code></pre>"},{"location":"Ruby/Day_1/#2-hello-world-and-maths","title":"2. Hello World and Maths","text":"<p>Write your first Hello World with</p> <pre><code>puts \"Hello World\"\n</code></pre> <p>This function will return <code>=&gt; nil</code>, which is the Ruby equivalent of python <code>None</code></p> <p>You can use also arithmetic operations such as:</p> <pre><code># sum\n5+5\n7-3\n# multiplication\n3*2\n# power\n3**2\n# division\n4/2\n# other mathematical operations\nMath.sqrt(9) # -&gt; 3\nMath.sin(3.14) # -&gt; 0\n</code></pre>"},{"location":"Ruby/Day_1/#3-define-methods","title":"3. Define methods","text":"<p>Methods are the equivalent of functions in python:</p> <pre><code>def hi\n    puts \"Hello world!\"\nend\n\n# call the method:\nhi()\n</code></pre> <p>You can also define parameters for a function:</p> <pre><code>def hi(name)\n    puts \"Hello #{name}\" # this is the Ruby way to do formatted strings\nend\n</code></pre> <p><code>name</code> can also be given a default value and/or capitalized:</p> <pre><code>def hi(name = \"clelia\")\n    puts \"Hello #{name.capitalize}\"\nend\n\nhi() # -&gt; \"Hello Clelia\"\nhi(\"chris\") # -&gt; \"Hello Chris\"\n</code></pre>"},{"location":"Ruby/Day_1/#4-define-classes","title":"4. Define classes","text":"<p>Classes are not different in their syntax from python:</p> <pre><code>class Greetings\n    def initialize(name=\"World\")\n        @name = name # @ is like self in python\n    end\n    def say_hi\n        \"Hi #{@name}\"\n    end\n    def say_bye\n        \"Bye #{@name}\"\n    end\nend\n\n# set the object as in python\ngreeter = Greetings(\"Pat\")\n</code></pre> <p>But there is a core difference with python itself: you cannot get the attribute <code>name</code> unless you explicitly set it as an attribute inside the class. You can do it by actually modifying the class:</p> <pre><code># See all instance methods\nGreetings.instance_methods\n# See only the instance methods you defined\nGreetings.instance_methods(false) # no ancestral methods\n# Re-open and modify the class\nclass Greetings\n    attr_accessor :name\nend\n\n# Check if the class responds to the name attribute\ngreeter = Greetings(\"Pat\")\n\ngreeter.respond_to?(\"name\") # get name\ngreeter.respond_to?(\"name=\") # set name\n\n# Set a new class object\ngreeter = Greetings.new(\"Andy\")\n# Set a new name\ngreeter.name = \"Anne\"\n</code></pre>"},{"location":"Ruby/Day_1/#5-more-advanced-example","title":"5. More advanced example","text":"<p>Let's take a look to an advanced example:</p> <pre><code>#!/usr/bin/env ruby\n\nclass MegaGreeter\n  attr_accessor :names\n\n  # Create the object\n  def initialize(names = \"World\")\n    @names = names\n  end\n\n  # Say hi to everybody\n  def say_hi\n    if @names.nil?\n      puts \"...\"\n    elsif @names.respond_to?(\"each\")\n      # @names is a list of some kind, iterate!\n      @names.each do |name|\n        puts \"Hello #{name}!\"\n      end\n    else\n      puts \"Hello #{@names}!\"\n    end\n  end\n\n  # Say bye to everybody\n  def say_bye\n    if @names.nil?\n      puts \"...\"\n    elsif @names.respond_to?(\"join\")\n      # Join the list elements with commas\n      puts \"Goodbye #{@names.join(\", \")}.  Come back soon!\"\n    else\n      puts \"Goodbye #{@names}.  Come back soon!\"\n    end\n  end\nend\n\n\nif __FILE__ == $0\n  mg = MegaGreeter.new\n  mg.say_hi\n  mg.say_bye\n\n  # Change name to be \"Zeke\"\n  mg.names = \"Zeke\"\n  mg.say_hi\n  mg.say_bye\n\n  # Change the name to an array of names\n  mg.names = [\"Albert\", \"Brenda\", \"Charles\",\n              \"Dave\", \"Engelbert\"]\n  mg.say_hi\n\nmg.say_bye\n\n  # Change to nil\n  mg.names = nil\n  mg.say_hi\n  mg.say_bye\nend\n</code></pre> <p>So:</p> <ul> <li>Arrays and lists have the same syntax as python (squared brackets)</li> <li><code>if...else</code> syntax is similar to python, with <code>elsif</code> instead of <code>elif</code></li> <li>Check if something is...<ul> <li>...a null: <code>var.nil?</code></li> <li>...a list: <code>var.respond_to?(\"each\")</code> or <code>var.respond_to?(\"join\")</code> (a list of strings, in the latter case)</li> </ul> </li> <li>Iterate over something with the <code>var.each do |var|...end</code> syntax: it's equivalent to <code>for var in vars</code> in python</li> <li>The <code>if __FILE__ == $0</code> is equivalent to the <code>if __name__ == \"__main__\"</code> in python and contains the \"executable\" part of the script</li> </ul> <p>Execute the script with:</p> <pre><code>ruby script.rb\n</code></pre>"},{"location":"Rust/Day_1/","title":"Day 1","text":"<p>The content of this page and of the following ones is based on The Rust Book</p>"},{"location":"Rust/Day_1/#1-introduction-to-rust","title":"1. Introduction to Rust","text":"<p>Rust is a low-level compiled programming language (similar to C/C++/C#).</p> <p>Install Rust on Ubuntu:</p> <pre><code>curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n</code></pre> <p>And check the version with:</p> <pre><code>rustc --version\n</code></pre> <p>Other useful commands:</p> <pre><code># update Rust\nrustup update\n# Uninstall Rust\nrustup uninstall self\n# View local docs\nrustup doc\n</code></pre>"},{"location":"Rust/Day_1/#2-hello-world","title":"2. Hello World!","text":"<p>Rust files have the <code>.rs</code> extension and files are by convention named using <code>snake_case</code> (like <code>hello_world.rs</code>).</p> <p>Let's create a Hello World script: </p> <pre><code>fn main(){\n    println!(\"Hello world!\");\n}\n</code></pre> <p>As you can see, there is the function, defined by the <code>fn</code> key, named <code>main</code> and with no parameters passed (void parentheses). The <code>main</code> function is special, as it is the first one to be run in the script. </p> <p>The body of the function makes us see four things: - Rust uses indentation with 4 spaces and not a tab - The <code>println!</code> calls a Rust macro: if it was a function, it would be called without \"!\" - \"Hello World!\" is a string and is printed on screen with  a newline  - The line is ended by a <code>;</code></p> <p>You can now compile the script:</p> <pre><code>rustc hello_world.rs\n</code></pre> <p>And run the binary executable which is output from that:</p> <pre><code>./hello_world # -&gt; outputs \"Hello world!\" \n</code></pre>"},{"location":"Rust/Day_1/#3-cargo","title":"3. Cargo","text":"<p>Cargo does a lot of things in Rust: manages dependencies and projects, checks and builds code. Cargo is already installed if you have installed <code>rustup</code> as we did before.</p> <pre><code>cargo --version\n</code></pre> <p>We can create a new project with:</p> <pre><code>cargo new hello_cargo --vcs=git\n# access the folder\ncd hello_cargo/\n</code></pre> <p><code>--vcs</code> is short for Version Control System, and in this case is <code>git</code>: it initializes the folder with a <code>.git/</code> subdirectory and a <code>.gitignore</code> file. To avoid if the cargo project is created within an already git-initialized folder.</p> <p>Within the repository, we have a TOML file named <code>Cargo.toml</code> with this minimal structure:</p> <pre><code>[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n</code></pre> <p>Let's now open the <code>src/main.rs</code> script (executed in the project) and we can see that cargo weote the Hello World script that we defined before:</p> <pre><code>fn main(){\n    println!(\"Hello world!\");\n}\n</code></pre> <p>Now let's first of all build our project:</p> <pre><code>cargo build\n</code></pre> <p>The build creates a <code>./target/debug/hello_cargo</code> file for debugging, that you can execute</p> <pre><code>./target/debug/hello_cargo\n</code></pre> <p>If you run <code>cargo build --release</code>, you build to release the package and you will get out a <code>./target/release/hello_cargo</code> binary.</p> <p>You can also run the project:</p> <pre><code>cargo run\n</code></pre> <p>We do not specify what cargo has to run: if scripts have not changed, cargo figures out what to run and does not rebuild anything.</p> <p>You can check if you code compiles without building an executable with:</p> <pre><code>cargo check\n</code></pre>"},{"location":"Rust/Day_2/","title":"Day 2","text":"<p>The content of this page and of the following ones is based on The Rust Book</p>"},{"location":"Rust/Day_2/#1-programming-a-guessing-game","title":"1. Programming a guessing game","text":"<p>Let's  first of all create a <code>guessing_game</code> project:</p> <pre><code>cargo new guessing_game\ncd guessing_game\n</code></pre> <p>Let's now modify <code>src/main.rs</code> in such a way that it takes the user's guess:</p> <pre><code>use std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}\n</code></pre> <p>Let's break down this code:</p> <ul> <li>Rust has a prelude, i.e. a set of pre-defined items that every program can access. If the library we need to access is not standard, we can import it. There are a set of built-in libraries, such as <code>random</code> in python: <code>std::io</code> is the library that makes you read/write from/to standard input</li> <li>As always, we declare the <code>main</code> function (followed by <code>()</code> and <code>{}</code>) as the entrypoint of our script</li> <li>We print some instructions</li> <li>We create a variable with <code>let</code>. <code>let</code> is a declarative statement that binds a value to a variabele:</li> </ul> <pre><code>let apples = 5; // this is an immutable function\n</code></pre> <ul> <li>The <code>apples</code> variable is immutable, meaning that once we give the variable a value, the value will not change. The <code>guess</code> variable we defined is mutable (keyword <code>mut</code>): this variable is bound to a particular value, which is a type (<code>String</code>) with its associated function (indicated by <code>::</code>): the <code>new</code> function creates  a new empty string. </li> <li>We receive the user input with the <code>read_line</code> method associated to <code>io::stdin()</code>. We pass the string <code>&amp;mut guess</code> as input. The <code>&amp;</code> sign means that this is a reference: references make pieces of code accessible to other pieces of code. References are safely and easily managed in Rust: they are immutable by default, so we need to pass <code>&amp;mut</code> and not only <code>&amp;guess</code> if we wanna maintain the mutability. </li> <li><code>io::stdin</code> returns a <code>Result</code>, which is of a particular type: enumerations or enums. These type of data can be in one or multiple states: each of the possible states is a variant. In the case of <code>io::stdin</code>, the result tells us the status of the operation. If the operation was successful, we have \"Ok\" and the function returns the number of bytes passed by the user, if not we have \"Err\". The error tells us also what is broken in our code. We handle potential errors within the function by using the <code>expect</code> method. If the <code>expect</code> method catches an error, it wiill return the error code and explanation, if not, it will just return the number of bytes passed by the user. This is possible because all <code>Result</code> instances have the <code>except</code> method.</li> </ul> <p>Note: this is different from error handling. With <code>expect</code>, the code crashes if there is an error, whereas with error handling this is not the case.</p>"}]}